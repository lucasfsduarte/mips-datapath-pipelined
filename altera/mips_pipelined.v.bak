
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

`include "fpga/display.v"
`include "fpga/clock_gen.v"
`include "hdl/main.v"

module mips_pipelined(

	//////////// CLOCK //////////
	CLOCK_50,
	CLOCK2_50,
	CLOCK3_50,

	//////////// LED //////////
	LEDG,
	LEDR,

	//////////// KEY //////////
	KEY,

	//////////// SW //////////
	SW,

	//////////// SEG7 //////////
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	HEX6,
	HEX7
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;
input 		          		CLOCK2_50;
input 		          		CLOCK3_50;

//////////// LED //////////
output		     [8:0]		LEDG;
output		    [17:0]		LEDR;

//////////// KEY //////////
input 		     [3:0]		KEY;

//////////// SW //////////
input 		    [17:0]		SW;

//////////// SEG7 //////////
output		     [6:0]		HEX0;
output		     [6:0]		HEX1;
output		     [6:0]		HEX2;
output		     [6:0]		HEX3;
output		     [6:0]		HEX4;
output		     [6:0]		HEX5;
output		     [6:0]		HEX6;
output		     [6:0]		HEX7;


//=======================================================
//  REG/WIRE declarations
//=======================================================
wire [31:0] CURR_ALU_OUT;
wire [31:0] CURR_INSTR;
wire [31:0] CURR_PC;
wire CLOCK;

//=======================================================
//  Structural coding
//=======================================================

clock_gen clock_gen_i0 (.M_CLK(CLOCK_50), S_CLK(CLOCK), .RST(SW[17]));
mips_dpipelined mips_dpipelined_i0 (.clk(CLOCK), .reset(SW[17]), .out1(CURR_PC), .out2(CURR_INSTR), .out3(CURR_ALU_OUT));
display display_i0 (CURR_INSTR[31:28], HEX7);
display display_i1 (CURR_INSTR[27:24], HEX6);
display display_i2 (CURR_INSTR[23:20], HEX5);
display display_i3 (CURR_INSTR[19:16], HEX4);
display display_i4 (CURR_INSTR[15:12], HEX3);
display display_i5 (CURR_INSTR[11:8], HEX2);
display display_i6 (CURR_INSTR[7:4], HEX1);
display display_i7 (CURR_INSTR[3:0], HEX0);

endmodule
